#+title Minion3665's emacs config
#+PROPERTY: header-args emacs-lisp :tangle yes :results none

* Emacs
** Make emacs look good
*** Turn off the startup message
     #+begin_src emacs-lisp :results no
       (setq inhibit-startup-message t)
     #+end_src
*** Remove other bloat
     #+begin_src emacs-lisp
       (scroll-bar-mode -1)
       (tool-bar-mode -1)
       (tooltip-mode -1)
       (menu-bar-mode -1)
     #+end_src
*** Theme emacs a little
**** Apply a theme
     Atom one dark theme (disabled)
     #+begin_src emacs-lisp
;;        (use-package one-themes
;;	 :config
;;	 (load-theme 'one-dark t))
     #+end_src
     #+begin_src emacs-lisp
       (use-package doom-themes
	 :config
	 (load-theme 'doom-shades-of-purple t))
     #+end_src

**** Change the font and font size to make it more readable
     #+begin_src emacs-lisp
       (set-face-attribute 'default nil :font "Hack Nerd Font" :height 130 :weight 'regular)
       (set-face-attribute 'variable-pitch nil :font "Roboto" :height 150 :weight 'regular)
       (use-package all-the-icons)
     #+end_src
     
**** Change padding options
     Add fringes
     #+begin_src emacs-lisp
       (set-fringe-mode 10)
     #+end_src
     And remove resizing bug at the bottom of the window
     #+begin_src emacs-lisp
       (setq frame-resize-pixelwise t)
     #+end_src

**** Enable line numbers
     #+begin_src emacs-lisp
              (column-number-mode)
              (global-display-line-numbers-mode t)

              (dolist (mode '(org-mode-hook
                              term-mode-hook
                              shell-mode-hook
                              eshell-mode-hook
                              vterm-mode-hook))
                (add-hook mode (lambda () (display-line-numbers-mode 0))))
     #+end_src

**** Add rainbow brackets and indents
     #+begin_src emacs-lisp
       (use-package rainbow-delimiters
	 :hook (prog-mode . rainbow-delimiters-mode))
     #+end_src
     #+begin_src emacs-lisp
       (use-package highlight-indent-guides
	 :hook (prog-mode . highlight-indent-guides-mode))
     #+end_src
**** Fix terminal theming
#+begin_src emacs-lisp
(use-package eterm-256color
  :config
  (add-hook 'term-mode-hook #'eterm-256color-mode))
#+end_src
*** Add some functions to do common tasks
#+begin_src emacs-lisp
(defun root ()
  "Edit the file that is associated with the current buffer as root"
  (interactive)
  (if (buffer-file-name)
      (progn
        (setq file (concat "/sudo:root@localhost:" (buffer-file-name)))
        (find-file file))
    (message "Current buffer does not have an associated file.")))
#+end_src
*** Add some useful keybinds
     Since I got emacs, I have been doing escape to close stuff *so much* and I need to let it actually work.
     #+begin_src emacs-lisp
       (global-set-key (kbd "<escape>") 'abort-recursive-edit)
     #+end_src
     Emacs needs to be able to do some stuff like locking the screen
     #+begin_src emacs-lisp
       (global-set-key (kbd "s-l") (lambda () (interactive) (shell-command "xautolock -locknow")))
     #+end_src
     How about changing volume with the volume slider on my headphones?
     #+begin_src
       (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>")
                           (lambda ()
                             (interactive)
                             (start-process-shell-command "VolumeUp" nil "pulsemixer --change-volume +3")))
       (exwm-input-set-key (kbd "<XF86AudioLowerVolume>")
                           (lambda ()
                             (interactive)
                             (start-process-shell-command "VolumeDown" nil "pulsemixer --change-volume -3")))
     #+end_src
*** Automatically complete some common programming tasks
**** Automatically indent
    #+begin_src emacs-lisp
      (use-package aggressive-indent
	:config
	(global-aggressive-indent-mode 1))
    #+end_src
*** Backup files go in the home
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "~/.cache/emacs/backups")))
#+end_src
** Do some stuff with the scratch buffer
#+begin_src emacs-lisp
  (defun unkillable-scratch-buffer ()
          (if (equal (buffer-name (current-buffer)) "*scratch*")
              (progn
                (delete-region (point-min) (point-max))
	          (insert initial-scratch-message)
                nil)
            t))

  (add-hook 'kill-buffer-query-functions 'unkillable-scratch-buffer)
#+end_src
#+begin_src emacs-lisp
  (add-hook 'lisp-interaction-mode-hook
            (lambda () (define-key lisp-interaction-mode-map (kbd "C-c C-c") 'eval-last-sexp)))
#+end_src
#+NAME: default-scratch-message
#+begin_example
;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with <open> and enter text in its buffer.

(shell-command "/home/minion/bin/touchpad_switch")
;; Switch the touchpad on or off

(shell-command "touch /tmp/no-highbatt-notifs")
(shell-command "rm /tmp/no-highbatt-notifs")
;; Turn on or off notifications about battery level

(shell-command "/usr/bin/dvm update d &")
;; Update discord development

(shell-command "/usr/bin/wmname LG3D")
;; Set the WM name (needed for some java applications including jetbrains apps)

(call-process-shell-command "/home/minion/.dvm/bin/discord-development &" nil 0)
(call-process-shell-command "/usr/bin/wmname LG3D && /home/minion/.local/share/JetBrains/Toolbox/apps/Rider/ch-0/212.5080.71/bin/rider.sh &" nil 0)
(call-process-shell-command "/usr/bin/teams &" nil 0)
(call-process-shell-command "/usr/lib/librewolf/librewolf &" nil 0)
;; Run common applications
#+end_example
#+begin_src emacs-lisp :var scratch-message=default-scratch-message
(setq initial-scratch-message scratch-message)
#+end_src
* Window Management
** Enable EXWM
   #+begin_src
     (use-package exwm
       :custom
       (exwm-workspace-number 10)
       (mouse-autoselect-window t)
       (focus-follows-mouse t)
       :bind (
              ("s-`" . (lambda () (interactive) (exwm-workspace-switch 0)))
              ("s-1" . (lambda () (interactive) (exwm-workspace-switch 1)))
              ("s-2" . (lambda () (interactive) (exwm-workspace-switch 2)))
              ("s-3" . (lambda () (interactive) (exwm-workspace-switch 3)))
              ("s-4" . (lambda () (interactive) (exwm-workspace-switch 4)))
              ("s-5" . (lambda () (interactive) (exwm-workspace-switch 5)))
              ("s-6" . (lambda () (interactive) (exwm-workspace-switch 6)))
              ("s-7" . (lambda () (interactive) (exwm-workspace-switch 7)))
              ("s-8" . (lambda () (interactive) (exwm-workspace-switch 8)))
              ("s-9" . (lambda () (interactive) (exwm-workspace-switch 9)))
              ("s-0" . (lambda () (interactive) (exwm-workspace-switch 0)))
              ("s-¬" . (lambda () (interactive) (exwm-workspace-move-window 0)))
              ("s-!" . (lambda () (interactive) (exwm-workspace-move-window 1)))
              ("s-\"" . (lambda () (interactive) (exwm-workspace-move-window 2)))
              ("s-£" . (lambda () (interactive) (exwm-workspace-move-window 3)))
              ("s-$" . (lambda () (interactive) (exwm-workspace-move-window 4)))
              ("s-%" . (lambda () (interactive) (exwm-workspace-move-window 5)))
              ("s-^" . (lambda () (interactive) (exwm-workspace-move-window 6)))
              ("s-&" . (lambda () (interactive) (exwm-workspace-move-window 7)))
              ("s-*" . (lambda () (interactive) (exwm-workspace-move-window 8)))
              ("s-(" . (lambda () (interactive) (exwm-workspace-move-window 9)))
              ("s-)" . (lambda () (interactive) (exwm-workspace-move-window 0))))
       :config
       (exwm-enable)
       (require 'exwm-systemtray)

       (setq exwm-systemtray-height 21)
       (exwm-systemtray-enable))
   #+end_src
** Set the window names after launching
#+begin_src
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))
#+end_src
** Enable winner mode (better moving back and forth between configurations)
   #+begin_src emacs-lisp
     (winner-mode 1)
   #+end_src
** Allow keybinds to be passed through to emacs
#+begin_src
  (dolist (k '(?\s-x
               ?\s-`
               ?\s-1
               ?\s-2
               ?\s-3
               ?\s-4
               ?\s-5
               ?\s-6
               ?\s-7
               ?\s-8
               ?\s-9
               ?\s-0
               ?\s-¬
               ?\s-!
               ?\s-\"
               ?\s-£
               ?\s-$
               ?\s-%
               ?\s-^
               ?\s-&
               ?\s-*
               ?\s-\(
               ?\s-\)
               ?\C-c
	         ?\C-z
               XF86AudioLowerVolume
               XF86AudioRaiseVolume
               XF86AudioPlay
               XF86AudioStop
               XF86AudioPrev
               XF86AudioNext))
    (push k exwm-input-prefix-keys))
#+end_src
** Add multi-display support
   #+begin_src
     (require 'exwm-randr)
     (shell-command "~/.screenlayout/setup-displays.sh")
     (setq exwm-randr-workspace-output-plist '(5 "HDMI-1-0" 6 "HDMI-1-0" 7 "HDMI-1-0" 8 "HDMI-1-0" 9 "HDMI-1-0"))
     (setq exwm-workspace-warp-cursor t)
     (exwm-randr-enable)
   #+end_src
* Orgmode
** Get & theme orgmode
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-ellipsis " ➤")
    (org-startup-indented t)
    (org-list-allow-alphabetical t)
    :hook (org-mode . (lambda () (interactive) (variable-pitch-mode 1) (visual-line-mode 1)))
    :config
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    (setq org-odt-preferred-output-format "docx")
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.2)
                    (org-level-5 . 1.2)
                    (org-level-6 . 1.2)
                    (org-level-7 . 1.2)
                    (org-level-8 . 1.2)))
      (set-face-attribute (car face) nil :font "Roboto" :weight 'semibold :height(cdr face)))
    ;; Below changes the - in lists to a •
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                                         (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch :height 130)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch) :height 130)
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch) :height 130)
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch) :height 130)
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch) :height 130)
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch) :height 130)
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch :height 130))
#+end_src
#+begin_src emacs-lisp
  (use-package org-contrib
    :after org)
#+end_src
#+begin_src emacs-lisp
  (defun enable-visual-mode ()
    (interactive)
    (setq visual-fill-column-width 120)
    (setq left-margin-width 10)
    (setq right-margin-width 10)
    (set-window-buffer nil (current-buffer))
    (setq visual-fill-column-center-text t)
    (setq visual-fill-column-mode 1))
    (use-package visual-fill-column
      :after org
      :hook (org-mode . enable-visual-mode))
#+end_src
#+begin_src emacs-lisp
  (defface org-bullet-face
    '((t :weight normal
         :height 0.8
         :inherit font-lock-comment-face))
    "A face to modify org-mode's heading characters so they are small hashtags"
    :group 'custom-faces)
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("#"))
    (org-bullets-face-name 'org-bullet-face))
#+end_src
** Setup orgmode-babel
*** Don't ask for confirmation before running
     #+begin_src emacs-lisp
       (setq org-confirm-babel-evaluate nil)
     #+end_src
*** Enable languages
#+begin_src emacs-lisp
  (use-package ob-go)
  (org-babel-do-load-languages
        'org-babel-load-languages
        '((js . t)
          (python . t)
          (go . t)))
#+end_src
** Setup org-roam
#+begin_src emacs-lisp
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src
   #+begin_src emacs-lisp
     (use-package org-roam
       :init
       (setq org-roam-v2-ack t)
       :after org
       :custom
       (org-roam-directory "~/Notes")
       (org-roam-db-location "~/Notes/org-roam.db")
       :bind (("C-c n l" . org-roam-buffer-toggle)
              ("C-c n f" . org-roam-node-find)
              ("C-c n i" . org-roam-node-insert)
	        ("C-c n o" . org-roam-node-insert-immediate)
              :map org-mode-map
              ("C-M-i" . completion-at-point)
              :map org-roam-dailies-map
              ("Y" . org-roam-dalies-capture-yesterday)
              ("T" . org-roam-dalies-caputre-tomorrow))
       :bind-keymap
       ("C-c n d" . org-roam-dailies-map)
       :config
       (require 'org-roam-dailies)
       (org-roam-db-autosync-mode))
   #+end_src
** Add some orgmode templates
     #+begin_src emacs-lisp
       (require 'org-tempo)
       (require 'go-mode)

       (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
       (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
       (add-to-list 'org-structure-template-alist '("py" . "src python"))
       (add-to-list 'org-structure-template-alist '("go" . "src go"))
     #+end_src
** Allow shift selection
     #+begin_src emacs-lisp
       (setq org-support-shift-select t)
     #+end_src
** Show LaTeX fragments when not hovered
#+begin_src emacs-lisp
  (use-package org-fragtog
  :config
  (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src
** Allow using citations
#+begin_src emacs-lisp
(require 'oc-basic)
#+end_src
* Company (Autocompletion)
#+begin_src emacs-lisp
        (use-package company
          :config
          (add-hook 'after-init-hook 'global-company-mode)
          (add-to-list 'company-backends 'company-capf)
          (defun add-pcomplete-to-capf ()
            (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
          (add-hook 'org-mode-hook #'add-pcomplete-to-capf)
          :custom
          (company-minimum-prefix-length 1)
          (company-idle-delay 0.0))
#+end_src
Complete latex
#+begin_src emacs-lisp
  (use-package company-math
  :after company
  :config
    (add-to-list 'company-backends 'company-math-symbols-latex))
#+end_src
Complete emojis
#+begin_src emacs-lisp
  (use-package company-emoji
    :after company
    :config
    (add-to-list 'company-backends 'company-emoji)
    )
#+end_src
* Programming
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Code")
      (setq projectile-project-search-path '("~/Code")))
    (setq projectile-switch-project-action #'projectile-dired))
(setq compilation-buffer-name-function
      #'projectile-compilation-buffer-name)
(setq compilation-save-buffers-predicate
      #'projectile-current-project-buffer-p)
#+end_src
#+begin_src emacs-lisp
(use-package counsel-projectile
 :after projectile
 :config
 (counsel-projectile-mode 1))
#+end_src
** TODO Magit
#+begin_src emacs-lisp
(use-package magit
  :commands (magit-status magit-get-current-branch)
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
Note: I don't use evil mode, but I intend to in future. If/when I do, this will become useful
#+begin_src emacs-lisp
;; (use-package evil-magit
;;   :after magit)
#+end_src
#+begin_src emacs-lisp
    (use-package forge
      :custom
      (auth-sources "secrets:Login"))
#+end_src
* Misc packages
** Counsel (General utilities)
   #+begin_src emacs-lisp
     (use-package counsel
       :bind (
         ("s-x". counsel-linux-app)
         ("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
       :custom
       (counsel-linux-app-format-function 'counsel-linux-app-format-function-name-first))
   #+end_src
** Diminish (hide modes to avoid clutter)
   #+begin_src emacs-lisp
     (use-package diminish)
   #+end_src
** Ivy (Autocompletion)
    #+begin_src emacs-lisp
            (use-package ivy
              :diminish
              :bind (
                :map ivy-minibuffer-map
                ("TAB" . ivy-alt-done)
                ("C-l" . ivy-alt-done)
                ("C-j" . ivy-next-line)
                ("C-k" . ivy-previous-line)
                :map ivy-switch-buffer-map
                ("C-k" . ivy-previous-line)
                ("C-l" . ivy-done)
                ("C-d" . ivy-switch-buffer-kill)
                :map ivy-reverse-i-search-map
                ("C-k" . ivy-previous-line)
                ("C-d" . ivy-reverse-i-search-kill))
              :config
              (ivy-mode 1)
              (set-face-attribute 'ivy-current-match nil :background "SlateBlue3")
              (set-face-attribute 'ivy-minibuffer-match-face-1 nil :foreground "gray") 
              :custom
              (ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
              (ivy-initial-inputs-alist '((woman . "^")
                                          (Man-completion-table . "^"))))
            (use-package ivy-rich
              :config
              (ivy-rich-mode 1))
    #+end_src
#+begin_src emacs-lisp
      (use-package prescient)
    (use-package ivy-prescient
      :after counsel
      :config
      (ivy-prescient-mode))
#+end_src
** Swiper (Find in file)
   #+begin_src emacs-lisp
     (use-package swiper
       :bind (
	 ("C-f" . swiper)))
   #+end_src
** Doom mode line (Better mode line)
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :custom
       (doom-modeline-height 40)
       :config
       (doom-modeline-mode 1)
       (display-time-mode 1)
       (display-battery-mode 1)
       )
   #+end_src
** Which-key (Keybinding help)
   #+begin_src emacs-lisp
     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.3))
   #+end_src
** Helpful (A better help command)
   #+begin_src emacs-lisp
     (use-package helpful
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command] . helpful-command)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key] . helpful-key))
   #+end_src
** Crdt (Collab)
#+begin_src emacs-lisp
(use-package crdt)
#+end_src
** Dired (directory listing)
#+begin_src emacs-lisp
(require 'dired)
  (define-key dired-mode-map [mouse-2] 'dired-mouse-find-file)
#+end_src
** Vterm (terminal)
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src
#+begin_src emacs-lisp
  (use-package multi-vterm
    :after vterm
    :config
    (defun vterm ()
      "Launch a new multi-vterm terminal"
      (interactive)
      (multi-vterm)))
#+end_src

** org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui)
#+end_src
 

** git-auto-commit-mode
#+begin_src emacs-lisp
(use-package git-auto-commit-mode)
#+end_src
